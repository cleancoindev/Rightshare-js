const FRight=[{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"isFrozen",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}],IRight=[{inputs:[],name:"currentTokenId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"ownerOf",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}],addresses={FRight:"0xD923152e96B0f8eDb28a8feC8765D9F8D81a6920",IRight:"0xcD8bF9Dd771E93B17e2164698dcB30Cb87D51057"};window.addEventListener("load",async()=>{if(window.ethereum){window.web3=new Web3(ethereum);try{await ethereum.enable()}catch(a){}}else window.web3?(window.web3=new Web3(web3.currentProvider),web3.eth.sendTransaction({})):console.log("Non-Ethereum browser detected. You should consider trying MetaMask!");window.web3&&(window.FRightContract=new web3.eth.Contract(FRight,addresses.FRight),window.IRightContract=new web3.eth.Contract(IRight,addresses.FRight))}),window.hasIRight=(a,b,c)=>{const d=[!1,[]];return new Promise(e=>{FRightContract.methods.isFrozen(a,b).call().then(a=>a?a?IRightContract.methods.currentTokenId().call().then(async a=>{if(0===a)return e(d);for(let b=1;b<=a;b++){const a=await IRightContract.methods.ownerOf(b).call();a.toLowerCase()===c.toLowerCase()&&(d[0]=!0,d[1].push(b))}return e(d)}):e(d):e(d))})};